apiVersion: v1
kind: Namespace
metadata:
  name: {KUBERNETES_NAMESPACE}
  labels:
    name: {KUBERNETES_NAMESPACE}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {APPLICATION_NAME}-deployment
  namespace: {KUBERNETES_NAMESPACE}
  labels:
    app: {APPLICATION_NAME}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {APPLICATION_NAME}
  template:
    metadata:
      name: api
      labels:
        name: {APPLICATION_NAME}
        app: {APPLICATION_NAME}
    spec:
      containers:
        - image: {APPLICATION_IMAGE}
          imagePullPolicy: Always
          name: {APPLICATION_NAME}
          resources:
            requests:
              memory: "{MEMORY_REQUEST}"
              cpu: "{CPU_REQUEST}"
            limits:
              memory: "{MEMORY_LIMIT}"
              cpu: "{CPU_LIMIT}"
          envFrom:
            - configMapRef:
                name: message
            - configMapRef:
                name: allowedcors
            - configMapRef:
                name: springprofile
          ports:
            - containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health-check
              port: 3000
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 3
            periodSeconds: 3
---
apiVersion: v1
kind: Service
metadata:
  name: {KUBERNETES_SERVICE}
  namespace: {KUBERNETES_NAMESPACE}
  labels:
    app: {APPLICATION_NAME}
spec:
  type: NodePort
  ports:
    - name: http
      port: 80
      targetPort: 3000
      protocol: TCP
  selector:
    app: {APPLICATION_NAME}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {KUBERNETES_INGRESS}
  namespace: {KUBERNETES_NAMESPACE}
  annotations:
    kubernetes.io/ingress.global-static-ip-name: {EXTERNAL_IP_ENDPOINT}
spec:
  tls:
    - secretName: {SECRET_TLS}
  rules:
    - host: {HOST}
      http:
        paths:
          - path: /*
            pathType: ImplementationSpecific
            backend:
              service:
                name: {KUBERNETES_SERVICE}
                port:
                  number: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {APPLICATION_NAME}-deployment
  namespace: {KUBERNETES_NAMESPACE}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {APPLICATION_NAME}-deployment
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 60
  minReplicas: {MINIMUM_REPLICAS}
  maxReplicas: {MAXIMUM_REPLICAS}
  metrics:
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: {AVERAGE_MEMORY}
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: {AVERAGE_CPU}
